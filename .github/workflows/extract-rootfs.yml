name: Extract iStoreOS ARM64 RootFS

on:
  workflow_dispatch:
    inputs:
      image_url:
        description: 'iStoreOS镜像下载URL（留空则自动查找最新版本）'
        required: false
        default: ''
      release_tag:
        description: '发布标签（留空则基于镜像版本自动生成）'
        required: false
        default: ''
      base_url:
        description: 'iStoreOS镜像目录URL'
        required: false
        default: 'https://fw0.koolcenter.com/iStoreOS/armsr/'


jobs:
  extract-rootfs:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置工作环境
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gzip fdisk parted squashfs-tools curl
        
    - name: 查找最新iStoreOS镜像
      id: find-latest
      run: |
        echo "开始查找最新镜像文件..."
        
        BASE_URL="${{ github.event.inputs.base_url || 'https://fw0.koolcenter.com/iStoreOS/armsr/' }}"
        CUSTOM_URL="${{ github.event.inputs.image_url }}"
        
        if [ -n "$CUSTOM_URL" ]; then
          echo "使用用户指定的URL: $CUSTOM_URL"
          echo "image_url=$CUSTOM_URL" >> $GITHUB_OUTPUT
          
          # 从文件名提取版本信息
          FILENAME=$(basename "$CUSTOM_URL")
          if [[ $FILENAME =~ istoreos-([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)-armsr ]]; then
            VERSION="${BASH_REMATCH[1]}"
            BUILD="${BASH_REMATCH[2]}"
            RELEASE_TAG="v${VERSION}-${BUILD}"
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "提取到版本信息: $RELEASE_TAG"
          else
            echo "release_tag=custom-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          fi
        else
          echo "自动查找最新版本..."
          echo "查找目录: $BASE_URL"
          
          # 获取目录列表（跟随重定向）
          DIRECTORY_LIST=$(curl -L -s "$BASE_URL" || echo "")
          
          if [ -z "$DIRECTORY_LIST" ]; then
            echo "错误: 无法获取目录列表"
            exit 1
          fi
          
          # 从HTML表格中提取href属性，然后使用grep和sort查找最新文件
          LATEST_FILE=$(echo "$DIRECTORY_LIST" | \
            grep -oE 'href="istoreos-[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-armsr-squashfs-combined-efi\.img\.gz"' | \
            sed 's/href="//g' | sed 's/"//g' | \
            sort -V | \
            tail -1)
          
          if [ -z "$LATEST_FILE" ]; then
            echo "错误: 未找到符合命名规则的镜像文件"
            echo "查找模式: istoreos-*.*.* -*-armsr-squashfs-combined-efi.img.gz"
            echo "目录内容预览:"
            echo "$DIRECTORY_LIST" | grep -oE 'href="[^"]*\.img\.gz"' | sed 's/href="//g' | sed 's/"//g' | head -10
            exit 1
          fi
          
          LATEST_URL="${BASE_URL}${LATEST_FILE}"
          echo "找到最新文件: $LATEST_FILE"
          echo "下载链接: $LATEST_URL"
          echo "image_url=$LATEST_URL" >> $GITHUB_OUTPUT
          
          # 提取版本信息
          if [[ $LATEST_FILE =~ istoreos-([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)-armsr ]]; then
            VERSION="${BASH_REMATCH[1]}"
            BUILD="${BASH_REMATCH[2]}"
            RELEASE_TAG="v${VERSION}-${BUILD}"
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "版本信息: $RELEASE_TAG"
          else
            echo "release_tag=auto-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          fi
        fi
        
        # 输出最终结果
        echo "✅ 镜像查找完成"
        echo "🔗 下载URL: $(cat $GITHUB_OUTPUT | grep image_url | cut -d'=' -f2-)"
        echo "🏷️ 发布标签: $(cat $GITHUB_OUTPUT | grep release_tag | cut -d'=' -f2-)"
        
    - name: 下载iStoreOS镜像
      run: |
        echo "开始下载镜像文件..."
        IMAGE_URL="${{ steps.find-latest.outputs.image_url }}"
        echo "下载链接: $IMAGE_URL"
        
        # 使用wget下载，带有重试和进度显示
        wget --tries=3 --timeout=30 --progress=bar:force \
             --user-agent="Mozilla/5.0 (compatible; GitHub-Actions)" \
             -O istoreos.img.gz "$IMAGE_URL"
        
        if [ $? -ne 0 ]; then
          echo "错误: 下载失败"
          exit 1
        fi
        
        echo "镜像文件下载完成"
        echo "下载文件大小: $(ls -lh istoreos.img.gz)"
        
        # 检查文件是否为gzip格式
        if ! file istoreos.img.gz | grep -q "gzip compressed"; then
          echo "警告: 下载的文件可能不是gzip格式"
          file istoreos.img.gz
        fi
        
    - name: 解压镜像文件
      run: |
        echo "开始解压镜像文件..."
        echo "原始文件大小: $(ls -lh istoreos.img.gz)"
        
        # 使用gunzip并忽略trailing garbage警告
        if gunzip -f istoreos.img.gz 2>&1 | grep -q "trailing garbage ignored"; then
          echo "警告: 检测到trailing garbage，但解压成功"
        fi
        
        # 检查解压后的文件是否存在
        if [ ! -f "istoreos.img" ]; then
          echo "错误: 解压失败，镜像文件不存在"
          exit 1
        fi
        
        echo "镜像文件解压完成"
        echo "解压后文件大小: $(ls -lh istoreos.img)"
        
        # 验证文件头部，确认是否为有效的磁盘镜像
        echo "验证镜像文件格式..."
        file istoreos.img
        
        # 检查文件大小（应该大于100MB）
        file_size=$(stat -c%s istoreos.img)
        if [ $file_size -lt 104857600 ]; then
          echo "警告: 镜像文件可能不完整，大小小于100MB"
        else
          echo "镜像文件大小正常: $(echo $file_size | numfmt --to=iec-i)B"
        fi
        
    - name: 分析镜像分区结构
      run: |
        echo "分析镜像分区结构..."
        fdisk -l istoreos.img
        parted istoreos.img print
        
    - name: 挂载并提取rootfs
      run: |
        echo "开始提取rootfs..."
        
        # 创建loop设备
        sudo losetup -P /dev/loop0 istoreos.img
        
        # 列出所有分区
        lsblk /dev/loop0
        
        # 通常rootfs在第二个分区，但我们需要确认
        sudo mkdir -p /mnt/rootfs
        
        # 尝试挂载可能的rootfs分区
        for partition in /dev/loop0p*; do
          if [ -e "$partition" ]; then
            echo "尝试挂载分区: $partition"
            if sudo mount -o ro "$partition" /mnt/rootfs 2>/dev/null; then
              echo "成功挂载分区: $partition"
              ls -la /mnt/rootfs/
              
              # 检查是否是rootfs（包含典型的Linux根目录结构）
              if [ -d "/mnt/rootfs/bin" ] && [ -d "/mnt/rootfs/etc" ] && [ -d "/mnt/rootfs/usr" ]; then
                echo "找到rootfs分区: $partition"
                
                # 创建rootfs压缩包
                echo "创建rootfs压缩包..."
                sudo tar -czf rootfs.tar.gz -C /mnt/rootfs .
                
                # 设置正确的权限
                sudo chown $USER:$USER rootfs.tar.gz
                
                echo "RootFS提取完成"
                ls -lh rootfs.tar.gz
                
                sudo umount /mnt/rootfs
                break
              else
                echo "该分区不是rootfs，继续查找..."
                sudo umount /mnt/rootfs
              fi
            else
              echo "无法挂载分区: $partition"
            fi
          fi
        done
        
        # 清理loop设备
        sudo losetup -d /dev/loop0
        
        # 验证rootfs文件是否创建成功
        if [ ! -f "rootfs.tar.gz" ]; then
          echo "错误：未能找到或提取rootfs"
          exit 1
        fi
        
    - name: 构建Docker镜像
      run: |
        echo "开始构建Docker镜像..."
        
        # 创建Dockerfile
        cat > Dockerfile << 'EOF'
        FROM scratch
        LABEL maintainer="iStoreOS Docker Image"
        LABEL description="iStoreOS ARM64 RootFS Docker Image"
        LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
        LABEL org.opencontainers.image.url="https://github.com/${{ github.repository }}"
        LABEL org.opencontainers.image.documentation="https://github.com/${{ github.repository }}/blob/main/DOCKER_GUIDE.md"
        LABEL org.opencontainers.image.version="${{ steps.find-latest.outputs.release_tag }}"
        LABEL org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        
        # 添加rootfs内容
        ADD rootfs.tar.gz /
        
        # 设置环境变量
        ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        ENV TERM=xterm
        
        # 设置入口点
        CMD ["/sbin/init"]
        EOF
        
        echo "Dockerfile创建完成"
        cat Dockerfile
        
    - name: 登录到GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.actor }}/istoreos:latest
          ghcr.io/${{ github.actor }}/istoreos:${{ steps.find-latest.outputs.release_tag }}
        labels: |
          org.opencontainers.image.title=iStoreOS
          org.opencontainers.image.description=iStoreOS ARM64 RootFS Docker Image
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.find-latest.outputs.release_tag }}
          org.opencontainers.image.created=${{ steps.date.outputs.date }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT
        
    - name: 准备发布文件
      run: |
        # 获取镜像信息
        echo "准备发布文件..."
        
        # 创建发布说明
        cat > release_notes.md << EOF
        # iStoreOS ARM64 RootFS 提取
        
        ## 镜像信息
        - **原始镜像**: \`${{ steps.find-latest.outputs.image_url }}\`
        - **提取时间**: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`
        - **架构**: ARM64
        - **格式**: tar.gz压缩包
        - **自动检测**: ✅ 自动获取最新版本
        
        ## Docker镜像
        - **镜像仓库**: \`ghcr.io/${{ github.actor }}/istoreos\`
        - **最新版本**: \`ghcr.io/${{ github.actor }}/istoreos:latest\`
        - **指定版本**: \`ghcr.io/${{ github.actor }}/istoreos:${{ steps.find-latest.outputs.release_tag }}\`
        
        ### Docker使用方法
        \`\`\`bash
        # 拉取镜像
        docker pull ghcr.io/${{ github.actor }}/istoreos:latest
        
        # 运行容器
        docker run -d --name istoreos --privileged ghcr.io/${{ github.actor }}/istoreos:latest
        
        # 旁路由模式运行（需要调整网络配置）
        docker run -d --name istoreos-gateway --privileged --network host ghcr.io/${{ github.actor }}/istoreos:latest
        \`\`\`
        
        ## 使用方法
        
        ### 方法1: 使用Docker镜像（推荐）
        \`\`\`bash
        docker pull ghcr.io/${{ github.actor }}/istoreos:latest
        docker run -d --privileged --name istoreos ghcr.io/${{ github.actor }}/istoreos:latest
        \`\`\`
        
        ### 方法2: 手动构建Docker镜像
        1. 下载 \`rootfs.tar.gz\` 文件
        2. 创建Dockerfile：
        \`\`\`dockerfile
        FROM scratch
        ADD rootfs.tar.gz /
        CMD ["/sbin/init"]
        \`\`\`
        3. 构建镜像：\`docker build -t istoreos .\`
        4. 运行容器：\`docker run -d --privileged istoreos\`
        
        ### 方法3: 直接解压使用
        \`\`\`bash
        tar -xzf rootfs.tar.gz -C /target/directory
        \`\`\`
        
        ## 文件校验
        - **SHA256**: \`$(sha256sum rootfs.tar.gz | cut -d' ' -f1)\`
        - **大小**: \`$(du -h rootfs.tar.gz | cut -f1)\`
        
        ## 相关文档
        - [Docker使用指南](https://github.com/${{ github.repository }}/blob/main/DOCKER_GUIDE.md)
        - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
        EOF
        
        echo "发布文件准备完成"
        cat release_notes.md
        
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.find-latest.outputs.release_tag }}
        name: iStoreOS ARM64 RootFS ${{ steps.find-latest.outputs.release_tag }}
        body_path: release_notes.md
        files: |
          rootfs.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 清理工作空间
      run: |
        echo "清理临时文件..."
        rm -f istoreos.img rootfs.tar.gz release_notes.md Dockerfile
        echo "工作流程完成"
        echo "✅ rootfs提取完成"
        echo "✅ Docker镜像已发布到 ghcr.io/${{ github.actor }}/istoreos"
        echo "✅ Release已创建完成"